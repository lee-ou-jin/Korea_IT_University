"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mysqlParser = void 0;
const knex_1 = __importDefault(require("knex"));
const Property_1 = require("../adapter/Property");
const DatabaseInfo_1 = require("../info/DatabaseInfo");
const ResourceInfo_1 = require("../info/ResourceInfo");
const object_1 = require("../utils/object");
exports.mysqlParser = {
    clients: ['mysql', 'mysql2'],
    parse: (client, connection) => __awaiter(void 0, void 0, void 0, function* () {
        if (!(connection === null || connection === void 0 ? void 0 : connection.database)) {
            throw new Error('connection.database is undefined');
        }
        const knex = (0, knex_1.default)({ client, connection });
        const tableNames = yield getTableNames(knex, connection.database);
        const resources = yield getResources(client, knex, connection.database, tableNames);
        const resourceMap = new Map();
        resources.forEach((r) => {
            resourceMap.set(r.tableName, r);
        });
        return new DatabaseInfo_1.DatabaseInfo(connection.database, resourceMap);
    }),
};
function getTableNames(knex, databaseName) {
    return __awaiter(this, void 0, void 0, function* () {
        const query = yield knex.raw(`show tables from \`${databaseName}\``);
        const [res] = yield query;
        if (!res[0]) {
            console.warn(`no tables in database ${databaseName}`);
            return [];
        }
        const key = Object.keys(res[0])[0];
        return res.map((r) => r[key]);
    });
}
function getResources(client, knex, databaseName, tableNames) {
    return __awaiter(this, void 0, void 0, function* () {
        return Promise.all(tableNames.map((tableName) => __awaiter(this, void 0, void 0, function* () {
            return new ResourceInfo_1.ResourceInfo(client, knex, databaseName, tableName, yield getProperties(knex, databaseName, tableName));
        })));
    });
}
function getProperties(knex, databaseName, tableName) {
    return __awaiter(this, void 0, void 0, function* () {
        const query = knex
            .from('information_schema.columns as col')
            .select('col.column_name', 'col.ordinal_position', 'col.column_default', 'col.is_nullable', 'col.data_type', 'col.column_type', 'col.column_key', 'col.extra', 'col.column_comment', 'key.referenced_table_name', 'key.referenced_column_name')
            .leftJoin('information_schema.key_column_usage as key', (c) => c
            .on('key.table_schema', 'col.table_schema')
            .on('key.table_name', 'col.table_name')
            .on('key.column_name', 'col.column_name')
            .on('key.referenced_table_schema', 'col.table_schema'))
            .where('col.table_schema', databaseName)
            .where('col.table_name', tableName);
        const rows = yield query;
        return rows.map((row) => newProperty((0, object_1.lowerCaseProperty)(row)));
    });
}
function newProperty(row) {
    const type = row.data_type.toLowerCase();
    const columnType = row.column_type.toLowerCase();
    let availableValues = null;
    if (type === 'set' || type === 'enum') {
        if (!columnType.startsWith(type)) {
            throw new Error('Unexpected condition. Please issue me.');
        }
        availableValues = columnType
            .split(type)[1]
            .replace(/^\('/, '')
            .replace(/'\)$/, '')
            .split("','");
    }
    const isSet = type === 'set';
    const isReference = row.referenced_table_name && row.referenced_table_name;
    const isId = row.column_key.toLowerCase() === 'pri';
    let isRequired = row.is_nullable.toLowerCase() === 'no' && row.column_default === null;
    if (isId && row.extra.toLowerCase() === 'auto_increment') {
        isRequired = false;
    }
    return new Property_1.Property(row.column_name, isId, true, true, availableValues, isRequired, isSet, row.referenced_table_name, row.referenced_column_name, row.ordinal_position, isReference ? 'reference' : ensureType(type, columnType), isId, true);
}
function ensureType(dataType, columnType) {
    switch (dataType) {
        case 'char':
        case 'varchar':
        case 'binary':
        case 'varbinary':
        case 'tinyblob':
        case 'blob':
        case 'mediumblob':
        case 'longblob':
        case 'enum':
        case 'set':
        case 'time':
        case 'year':
            return 'string';
        case 'tinytext':
        case 'text':
        case 'mediumtext':
        case 'longtext':
            return 'textarea';
        case 'bit':
        case 'smallint':
        case 'mediumint':
        case 'int':
        case 'integer':
        case 'bigint':
            return 'number';
        case 'float':
        case 'double':
        case 'decimal':
        case 'dec':
            return 'float';
        case 'tinyint':
            if (columnType === 'tinyint(1)') {
                return 'boolean';
            }
            return 'number';
        case 'bool':
        case 'boolean':
            return 'boolean';
        case 'date':
            return 'date';
        case 'datetime':
        case 'timestamp':
            return 'datetime';
        default:
            console.warn(`Unexpected type: ${dataType} ${columnType} fallback to string`);
            return 'string';
    }
}
//# sourceMappingURL=mysql.js.map